
https://www.w3schools.com/python/python_strings_methods.asp


M√©todo	Significado em portugu√™s
capitalize()	Converte o primeiro caractere para mai√∫sculo
casefold()	Converte a string para min√∫sculas (mais forte que lower())
center()	Centraliza a string (com preenchimento)
count()	Retorna quantas vezes um valor aparece na string
encode()	Retorna uma vers√£o codificada da string (ex: UTF-8)
endswith()	Retorna True se a string terminar com o valor especificado
expandtabs()	Define o tamanho do caractere de tabula√ß√£o (\t)
find()	Procura um valor e retorna a posi√ß√£o da primeira ocorr√™ncia
format()	Insere valores formatados na string
format_map()	Insere valores usando um dicion√°rio como mapa
index()	Retorna a posi√ß√£o da primeira ocorr√™ncia do valor (erro se n√£o encontrar)
isalnum()	Retorna True se todos os caracteres forem letras ou n√∫meros
isalpha()	Retorna True se todos os caracteres forem letras
isascii()	Retorna True se todos os caracteres forem ASCII
isdecimal()	Retorna True se todos os caracteres forem n√∫meros decimais
isdigit()	Retorna True se todos os caracteres forem d√≠gitos
isidentifier()	Retorna True se for um identificador v√°lido (como nomes de vari√°veis)
islower()	Retorna True se todos os caracteres forem min√∫sculos
isnumeric()	Retorna True se todos os caracteres forem num√©ricos
isprintable()	Retorna True se todos os caracteres forem imprim√≠veis
isspace()	Retorna True se todos os caracteres forem espa√ßos em branco
istitle()	Retorna True se a string estiver no formato de t√≠tulo (Ex: "Este √â Um T√≠tulo")
isupper()	Retorna True se todos os caracteres forem mai√∫sculos
join()	Junta os elementos de um iter√°vel com a string como separador
ljust()	Justifica a string √† esquerda
lower()	Converte todos os caracteres para min√∫sculas
lstrip()	Remove os espa√ßos √† esquerda da string
maketrans()	Cria uma tabela de tradu√ß√£o para ser usada com translate()
partition()	Divide a string em 3 partes em torno de um separador
replace()	Substitui parte da string por outra
rfind()	Retorna a √∫ltima posi√ß√£o de ocorr√™ncia de um valor
rindex()	Retorna a √∫ltima posi√ß√£o de ocorr√™ncia (erro se n√£o encontrar)
rjust()	Justifica a string √† direita
rpartition()	Divide em 3 partes com base na √∫ltima ocorr√™ncia de um separador
rsplit()	Divide a string a partir da direita
rstrip()	Remove os espa√ßos √† direita da string
split()	Divide a string usando um separador
splitlines()	Divide a string por quebras de linha
startswith()	Retorna True se a string come√ßar com o valor especificado
strip()	Remove espa√ßos dos dois lados da string
swapcase()	Inverte mai√∫sculas e min√∫sculas na string
title()	Coloca a primeira letra de cada palavra em mai√∫scula
translate()	Aplica uma tabela de tradu√ß√£o aos caracteres da string
upper()	Converte todos os caracteres para mai√∫sculos
zfill()	Preenche a string com zeros √† esquerda at√© atingir o tamanho desejado

---

### üî§ **1. Capitaliza√ß√£o e caixa de texto**

```python
print("python".capitalize())  # Python
print("PYTHON".casefold())    # python
print("python".center(10, "-"))  # --python--
print("Ol√° mundo!".swapcase())  # oL√Å MUNDO!
print("python √© legal".title())  # Python √â Legal
print("python".upper())       # PYTHON
print("PYTHON".lower())       # python
```

---

### üîé **2. Busca e contagem**

```python
print("banana".count("a"))    # 3
print("banana".find("n"))     # 2
print("banana".rfind("a"))    # 5
print("banana".index("n"))    # 2
print("banana".rindex("a"))   # 5
```

---

### üìå **3. Verifica√ß√£o de tipo de caracteres**

```python
print("abc123".isalnum())     # True
print("abc".isalpha())        # True
print("123".isdigit())        # True
print("123".isdecimal())      # True
print("œÄ".isnumeric())        # True
print("var_1".isidentifier()) # True
print("texto".islower())      # True
print("TEXTO".isupper())      # True
print("Texto Legal".istitle())# True
print("   ".isspace())        # True
print("√°".isascii())          # False
print("Ol√°!".isprintable())   # True
```

---

### üîÅ **4. Substitui√ß√£o e formata√ß√£o**

```python
print("ol√° mundo".replace("mundo", "Python"))  # ol√° Python
print("Valor: {}".format(10))                  # Valor: 10
print("Valor: {valor}".format_map({'valor': 20}))  # Valor: 20
```

---

### üìé **5. Testes com come√ßo/fim e separa√ß√£o**

```python
print("python.py".endswith(".py"))     # True
print("python.py".startswith("py"))    # True
print("a,b,c".split(","))              # ['a', 'b', 'c']
print("linha1\nlinha2".splitlines())   # ['linha1', 'linha2']
```

---

### üßº **6. Espa√ßos e alinhamento**

```python
print(" texto ".strip())      # 'texto'
print(" texto ".lstrip())     # 'texto '
print(" texto ".rstrip())     # ' texto'
print("42".zfill(5))          # '00042'
print("python".ljust(10, "-"))# 'python----'
print("python".rjust(10, "-"))# '----python'
```

---

### üìö **7. Jun√ß√£o e tabula√ß√£o**

```python
print(",".join(["a", "b", "c"]))    # a,b,c
print("a\tb\tc".expandtabs(4))      # a   b   c
```

---

### üß© **8. Particionamento**

```python
print("nome=joao".partition("="))   # ('nome', '=', 'joao')
print("a=b=c".rpartition("="))      # ('a=b', '=', 'c')
print("a b c".rsplit(" ", 1))       # ['a b', 'c']
```

---

### üîÑ **9. Tradu√ß√£o de caracteres**

```python
# Trocar a por @ e e por 3
tabela = str.maketrans("ae", "@3")
print("paralela".translate(tabela))  # p@r@l@l@
```

---

Se quiser exemplos mais avan√ßados (como com listas, arquivos ou express√µes regulares), posso preparar tamb√©m. Deseja?





